import urllib.request
import urllib.parse
import urllib.error
import xml.etree.ElementTree as ET
import json
import time

TOKEN = "7748292828:AAG4P5-96RE9AcYcWz3mg9KjUmSeVUG2v74"

class CurrencyConverterBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}/"
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = self.base_url + "sendMessage"
        data = urllib.parse.urlencode({
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }).encode()
        
        try:
            urllib.request.urlopen(url, data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    def get_updates(self, offset=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        url = self.base_url + "getUpdates"
        if offset:
            url += f"?offset={offset}"
        
        try:
            with urllib.request.urlopen(url) as response:
                return json.loads(response.read().decode('utf-8'))
        except:
            return {'result': []}
    
    def get_currency_rate(self, currency):
        """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ—Ç –¶–ë"""
        if currency == 'RUB':
            return 1.0
            
        try:
            with urllib.request.urlopen("https://www.cbr.ru/scripts/XML_daily.asp") as r:
                xml = r.read().decode('windows-1251')
            
            root = ET.fromstring(xml)
            for valute in root.findall('Valute'):
                if valute.find('CharCode').text == currency:
                    value = valute.find('Value').text.replace(',', '.')
                    nominal = int(valute.find('Nominal').text)
                    return float(value) / nominal
            return 0
        except:
            return 0
    
    def convert_currency(self, amount, from_curr, to_curr):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã"""
        from_rate = self.get_currency_rate(from_curr)
        to_rate = self.get_currency_rate(to_curr)
        
        if from_rate == 0 or to_rate == 0:
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Ä—É–±–ª–∏
        amount_in_rub = amount * from_rate
        result = amount_in_rub / to_rate
        
        return result, from_rate, to_rate
    
    def handle_message(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        text = text.upper().strip()
        
        if text == '/start':
            self.send_message(chat_id, 
                "üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –¶–ë –†–§</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>100 USD –≤ RUB</code>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, GBP, CNY, JPY, RUB"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        parts = text.split()
        
        if len(parts) >= 4 and parts[2] in ['–í', '–í', 'TO', '->']:
            try:
                amount = float(parts[0])
                from_curr = parts[1]
                to_curr = parts[3]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—ã
                valid_currencies = ['USD', 'EUR', 'GBP', 'CNY', 'JPY', 'RUB']
                if from_curr not in valid_currencies:
                    self.send_message(chat_id, f"‚ùå –í–∞–ª—é—Ç–∞ {from_curr} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    return
                if to_curr not in valid_currencies:
                    self.send_message(chat_id, f"‚ùå –í–∞–ª—é—Ç–∞ {to_curr} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    return
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                result = self.convert_currency(amount, from_curr, to_curr)
                
                if result:
                    final_amount, from_rate, to_rate = result
                    self.send_message(chat_id,
                        f"üí± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>\n\n"
                        f"üí∞ <b>{amount} {from_curr}</b> = <b>{final_amount:.2f} {to_curr}</b>\n\n"
                        f"üìä <b>–ö—É—Ä—Å—ã –¶–ë –†–§:</b>\n"
                        f"1 {from_curr} = {from_rate:.2f} RUB\n"
                        f"1 {to_curr} = {to_rate:.2f} RUB\n\n"
                        f"üí° –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å: <code>{amount} {from_curr} –≤ {to_curr}</code>"
                    )
                else:
                    self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
                    
            except ValueError:
                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
            except Exception as e:
                self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        else:
            self.send_message(chat_id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>100 USD –≤ RUB</code>\n"
                "<code>5000 RUB –≤ EUR</code>\n"
                "<code>50 EUR –≤ USD</code>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, GBP, CNY, JPY, RUB"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω...")
        offset = 0
        
        while True:
            try:
                updates = self.get_updates(offset)
                
                if 'result' in updates:
                    for update in updates['result']:
                        offset = update['update_id'] + 1
                        
                        if 'message' in update and 'text' in update['message']:
                            chat_id = update['message']['chat']['id']
                            text = update['message']['text']
                            
                            print(f"üì® {chat_id}: {text}")
                            self.handle_message(chat_id, text)
                
                time.sleep(1)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                time.sleep(5)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = CurrencyConverterBot(TOKEN)
    bot.run()
