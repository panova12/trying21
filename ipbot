import urllib.request
import urllib.parse
import json
import time
import os
import hashlib
import string
import socket
from datetime import datetime

TOKEN = "8311853902:AAHd5GQ7142PC08U2usnRptBETunmFAllqA"

def generate_password(length=16):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    randombit = os.urandom(64)
    entropy = str(os.times() + os.getloadavg()).encode()
    combo = randombit + entropy
    hash_object = hashlib.sha256(combo)
    hex_digest = hash_object.hexdigest()
    password = hex_digest[:length]
    return password

def get_detailed_connection_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    info = {}
    
    try:
        services = [
            'https://api.ipify.org',
            'https://ident.me',
            'http://checkip.amazonaws.com'
        ]
        
        for service in services:
            try:
                with urllib.request.urlopen(service, timeout=5) as response:
                    info['external_ip'] = response.read().decode('utf-8').strip()
                    break
            except:
                continue
        
        hostname = socket.gethostname()
        info['hostname'] = hostname
        
        try:
            local_ip = socket.gethostbyname(hostname)
            info['local_ip'] = local_ip
        except:
            info['local_ip'] = 'unknown'
        
        info['timezone'] = time.tzname[0]
        info['server_time'] = datetime.now().isoformat()
        
    except Exception as e:
        info['error'] = str(e)
    
    return info

def print_terminal_analytics(update, analytics_data):
    """–í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
    try:
        message = update.get('message', {})
        chat = message.get('chat', {})
        
        user_hash = hashlib.md5(str(chat.get('id')).encode()).hexdigest()[:8]
        server_info = get_detailed_connection_info()
        
        print("\n" + "="*60)
        print("üìä –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ê–ù–ê–õ–ò–¢–ò–ö–ê –í –¢–ï–†–ú–ò–ù–ê–õ–ï")
        print("="*60)
        
        print(f"üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
        print(f"   üîê –•–µ—à: {user_hash}")
        print(f"   üë§ Username: @{chat.get('username', 'unknown')}")
        print(f"   üìõ –ò–º—è: {chat.get('first_name', 'unknown')}")
        print(f"   üÜî Chat ID: {chat.get('id', 'unknown')}")
        
        print(f"\nüí¨ –°–û–û–ë–©–ï–ù–ò–ï:")
        print(f"   üì® –¢–µ–∫—Å—Ç: {message.get('text', 'unknown')}")
        print(f"   üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        
        print(f"\nüåê –°–ï–†–í–ï–†–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"   üìç –í–Ω–µ—à–Ω–∏–π IP: {server_info.get('external_ip', 'unknown')}")
        print(f"   üè† –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {server_info.get('local_ip', 'unknown')}")
        print(f"   üíª –•–æ—Å—Ç–Ω–µ–π–º: {server_info.get('hostname', 'unknown')}")
        print(f"   ‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {server_info.get('timezone', 'unknown')}")
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(analytics_data)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users = {}
        for record in analytics_data:
            hash_val = record.get('user_hash')
            users[hash_val] = users.get(hash_val, 0) + 1
        
        print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        if users:
            top_user = max(users, key=users.get)
            print(f"   üèÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: {top_user} ({users[top_user]} —Å–æ–æ–±—â.)")
        
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: {e}")

class SecurityBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}/"
        self.analytics_data = []
        self.load_analytics()
    
    def load_analytics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            with open('bot_analytics.json', 'r', encoding='utf-8') as f:
                self.analytics_data = json.load(f)
            print(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {len(self.analytics_data)}")
        except FileNotFoundError:
            self.analytics_data = []
            print("üìÇ –§–∞–π–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            self.analytics_data = []
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = self.base_url + "sendMessage"
        data = urllib.parse.urlencode({
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }).encode()
        
        try:
            urllib.request.urlopen(url, data)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def get_updates(self, offset=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        url = self.base_url + "getUpdates"
        if offset:
            url += f"?offset={offset}"
        
        try:
            with urllib.request.urlopen(url) as response:
                return json.loads(response.read().decode('utf-8'))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è updates: {e}")
            return {'result': []}
    
    def collect_analytics(self, update):
        """–°–±–æ—Ä –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            message = update.get('message', {})
            chat = message.get('chat', {})
            
            analytics = {
                'timestamp': datetime.now().isoformat(),
                'chat_id': chat.get('id'),
                'username': chat.get('username', 'unknown'),
                'first_name': chat.get('first_name', 'unknown'),
                'message_text': message.get('text', '')[:100],
                'message_date': message.get('date')
            }
            
            analytics['user_hash'] = hashlib.md5(
                str(chat.get('id')).encode()
            ).hexdigest()[:8]
            
            server_info = get_detailed_connection_info()
            analytics.update(server_info)
            
            self.analytics_data.append(analytics)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(self.analytics_data) % 3 == 0:
                self.save_analytics()
                
            return analytics
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return None
    
    def save_analytics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open('bot_analytics.json', 'w', encoding='utf-8') as f:
                json.dump(self.analytics_data, f, ensure_asciii=False, indent=2)
            print(f"üíæ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–≤—Å–µ–≥–æ: {len(self.analytics_data)} –∑–∞–ø–∏—Å–µ–π)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    def handle_message(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –¢–û–õ–¨–ö–û –ü–ê–†–û–õ–ò –í TELEGRAM"""
        text = text.strip()
        
        if text == '/start':
            self.send_message(chat_id,
                "üîê <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/password - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å (16 —Å–∏–º–≤–æ–ª–æ–≤)\n"
                "/strong - –°—É–ø–µ—Ä-–Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (20 —Å–∏–º–≤–æ–ª–æ–≤)\n"
                "/help - –ü–æ–º–æ—â—å\n\n"
                "üí° <i>–í—Å–µ –ø–∞—Ä–æ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ</i>"
            )
        
        elif text == '/help':
            self.send_message(chat_id,
                "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/password - –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (16 —Å–∏–º–≤–æ–ª–æ–≤)\n"
                "/strong - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ (20 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                "üîí <i>–ü–∞—Ä–æ–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</i>"
            )
        
        elif text == '/password':
            password = generate_password(16)
            self.send_message(chat_id,
                f"üîê <b>–í–∞—à –ø–∞—Ä–æ–ª—å:</b>\n\n"
                f"<code>{password}</code>\n\n"
                f"üî¢ <b>–î–ª–∏–Ω–∞:</b> {len(password)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üí™ <b>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è\n\n"
                f"‚ö†Ô∏è <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!</i>"
            )
        
        elif text == '/strong':
            password = generate_password(20)
            self.send_message(chat_id,
                f"üí™ <b>–°—É–ø–µ—Ä-–Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b>\n\n"
                f"<code>{password}</code>\n\n"
                f"üî¢ <b>–î–ª–∏–Ω–∞:</b> {len(password)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üõ°Ô∏è <b>–ó–∞—â–∏—Ç–∞:</b> –í–æ–µ–Ω–Ω–∞—è\n\n"
                f"üö® <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!</i>"
            )
        
        else:
            self.send_message(chat_id,
                "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/password - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π\n"
                "/strong - –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å\n"
                "/help - –ü–æ–º–æ—â—å"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω - –ü–∞—Ä–æ–ª–∏ –≤ Telegram, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        print("="*50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_info = get_detailed_connection_info()
        print("üåê –°–¢–ê–†–¢–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ï–†–ï:")
        print(f"   üìç –í–Ω–µ—à–Ω–∏–π IP: {server_info.get('external_ip', 'unknown')}")
        print(f"   üè† –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {server_info.get('local_ip', 'unknown')}")
        print(f"   üíª –•–æ—Å—Ç–Ω–µ–π–º: {server_info.get('hostname', 'unknown')}")
        print(f"   ‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {server_info.get('timezone', 'unknown')}")
        print(f"   üìä –ó–∞–ø–∏—Å–µ–π –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {len(self.analytics_data)}")
        print("="*50)
        
        test_updates = self.get_updates()
        if 'result' in test_updates:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
            return
        
        offset = 0
        
        try:
            while True:
                updates = self.get_updates(offset)
                
                if 'result' in updates:
                    for update in updates['result']:
                        offset = update['update_id'] + 1
                        
                        if 'message' in update and 'text' in update['message']:
                            chat_id = update['message']['chat']['id']
                            text = update['message']['text']
                            
                            # –í–´–í–û–î–ò–ú –ê–ù–ê–õ–ò–¢–ò–ö–£ –í –¢–ï–†–ú–ò–ù–ê–õ
                            print_terminal_analytics(update, self.analytics_data)
                            
                            # –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª)
                            self.collect_analytics(update)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –≤ Telegram)
                            self.handle_message(chat_id, text)
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.save_analytics()
            print("üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bot_analytics.json")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.save_analytics()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = SecurityBot(TOKEN)
    bot.run()
